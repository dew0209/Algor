访问地址：https://leetcode.cn/problems/minimum-cost-to-merge-stones/
思路：dp

class Solution {
public:
    int mergeStones(vector<int>& stones, int k) {
        int n = stones.size();
        if((n - 1) % (k - 1)){
            return -1;
        }
        vector d(n,vector(n,vector<int>(k + 1,0x3f3f3f3f)));
        vector<int> sum(n,0);
        for(int i = 0,s = 0;i < n;i++){
            d[i][i][1] = 0;
            s += stones[i];
            sum[i] = s;
        }
        for(int len = 2;len <= n;len++){
            for(int l = 0;l + len - 1 < n;l++){
                int r = l + len - 1;
                for(int t = 2;t <= k;t++){
                    for(int p = l;p < r;p += k - 1){
                        d[l][r][t] = min(d[l][r][t],d[l][p][1] + d[p + 1][r][t - 1]);
                    }
                }
                d[l][r][1] = min(d[l][r][1],d[l][r][k] + sum[r] - (l == 0 ? 0 : sum[l - 1]));
            }
        }
        return d[0][n - 1][1];
    }
};