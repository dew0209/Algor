访问地址：https://leetcode.cn/problems/maximal-network-rank/
思路：贪心

class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        vector<vector<int>> mp(n,vector<int>(n,0));
        vector<int> cnt(n,0);
        for(int i = 0;i < roads.size();i++){
            int x = roads[i][0];
            int y = roads[i][1];
            mp[x][y] = 1;
            mp[y][x] = 1;
            cnt[x]++;
            cnt[y]++;
        }
        int m = roads.size();
        int res = 0;
        vector<int> fiArr;
        int fiVal = -1;
        vector<int> seArr;
        int seVal = -2;
        for(int i = 0;i < n;i++){
            int v = cnt[i];
            if(v > fiVal){
                seArr = fiArr;
                seVal = fiVal;
                fiVal = v;
                fiArr.clear();
                fiArr.push_back(i);
            }else if(v == fiVal){
                fiArr.push_back(i);
            }else if(v > seVal){
                seVal = v;
                seArr.clear();
                seArr.push_back(i);
            }else if(v == seVal){
                seArr.push_back(i);
            }
        }
        if(fiArr.size() == 1){
            int u = fiArr[0];
            for(auto c : seArr){
                if(!mp[c][u]){
                    return fiVal + seVal;
                }
            }
            return fiVal + seVal - 1;
        }else {
            if(fiArr.size() * (fiArr.size() - 1) / 2 > m){
                 return fiVal * 2;
            }
            for(auto u : fiArr){
                for(auto t : fiArr){
                    if(!mp[u][t] && u != t){
                        return fiVal * 2;
                    }
                }
            }
            return fiVal * 2 - 1;
        }
        return res;
    }
};

思路：暴力枚举
class Solution {
public:
    int maximalNetworkRank(int n, vector<vector<int>>& roads) {
        vector<vector<int>> mp(n,vector<int>(n,0));
        vector<int> cnt(n,0);
        for(int i = 0;i < roads.size();i++){
            int x = roads[i][0];
            int y = roads[i][1];
            mp[x][y] = 1;
            mp[y][x] = 1;
            cnt[x]++;
            cnt[y]++;
        }
        int res = 0;
        for(int i = 0;i < n;i++){
            for(int j = i + 1;j < n;j++){
                int v = cnt[i] + cnt[j] - mp[i][j];
                if(v > res){
                    res = v;
                }
            }
        }
        return res;
    }
};